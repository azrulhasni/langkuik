Getting started
---------------
1) Install Keycloak
2) Load realm-export.json
3) Create a user + password (e.g. donald.duck)
4) Make sure the user has an email
5) Make sure the box "Required User Actions" is empty
6) !!!!!Make sure the realm role is "user" - user need to be created and must have all the relevent roles
7) Save user
8) Launch Langkuik - and click on Login button
9) Put in user credentials + password (donald.duck + password)
10) Good to go
11) You may want to add roles to user. Please use Keycloak's client role instead of realm role [see notes #12]



To be done
----------
DONE 1) Filter PojoView link existing table to reflect One_To_One, One_To_Many (Entity with relationship is filtered out)
 and Many_To_One or Many_To_Many (show all)
NOT_NEEDED* DONE 2) Use inheritence to manage draft version
    a. parent class (LangkuikExt) has tranxId
    b. when an object is newly created (i.e. the Dialog for that object is still displayed), the object is in PRE_DRAFT. It will be converted to draft when saved
    c.  when create an object graph (aggregate in DDD), all entities in the graph will have the same tranxId, status for the whole graph is now DRAFT
    d.  when the root is persisted -> query all parent objects having the same tranxId as the root object -> move their status from DRAFT to IN PROGRESS
    e.  Any object still in PRE_DRAFT, will be deleted

    *This cannot be done since when we do d. above, the query for all objects with the same tranxId will unionised all tables. This will nullify any indexes. Seems risky to do
     We opt instead to just save as we create our object graph

DONE 4) Range queries (numbers, dates, string)
DONE 5) Compulsory fields
DONE 6) Attachments
DONE 7) Custom Components
DONE 8) Search parse error to surface
DONE 9) Draft version should look different
DONE 10) Able to delete draft version
DONE AND DONE 11) Use optional to manage nulls
DONE 12) Able to unlink/delete stuff
DONE 13) Dynamic combobox lookup (one lookup filter the other)
DONE 14) Reverse dynamic lookup
DONE 15) DB cache
DONE 16) Audit trail
DONE 17) Where used
WAIT 18) Highlight search - at least in table (wait for Hibernate Search 6.1?)
DONE 19) Put ids on component for automation
DONE 20) Automated test
21) Map/Location custom type
DONE 22) Display worklist
DONE 23) Booking of ticket for work
DONE 24) Delete attachment
DONE 25) Editable management
DONE 26) Tabs
DONE 27) ReadOnly fields
DONE 28) Custom field
DONE 29) Approval management
DONE 30) Approval by supervisor
DONE 31) Booked work will appear in owner's own folder, not in general worklist
DONE 32) A timer to unbook/escalate a work expiring Y days (Y=SLA)
NO NEED  - WILL DO BAM LATER 33) SLA and Escalation management
DONE 34) Notes (replaced with reviewable input components #36)
35) Keyboard-only operation
REPLACED 36) Reviewable input components (each text box has a review text box for reviewer to add comments)
DONE 37) Min.max cardinality constraints on relationship. Note: This cardinality constraint only work if you have CAN_ADD_AND_DELETE rights to the relationship
DONE 38) Reference management. CRUD. If Status=DRAFF, REF_ADMIN can edit, other people cannot see, If Status not CANCELLED, others can see and choose. Ref items with other work depending on it cannot be deleted
DONE 39) Audit feature with 'Audit' role
DONE 40) Multiple supervisors approvals
DONE 41) Externalize supervisor lookup - provide out-of-the-box implementation
DONE 42) Search expression
DONE 43) Migration to Elasticsearch (Can scale now!!)
DONE 44) Move string based elasticsearch json to actual json object
DONE 45) Feature to release work stuck in a particular worklist. Each role has a manager (keycloak attribute Manager-of-role). The manager can release a work under a worklist or the role - despite approval levels etc.
DONE 46) Allow sender to see non-approval input from reviewer/supervisor
DONE 47) Allow approver to see historical approvals of the same work id at the same worklist (if we are in a loop, we will see multiple loop)
DONE 48) Allow visibility (visibleInTable and visibleInForm) to take in expression
DONE 49) Majority based XOR node
DONE 50) Rights management per field / relationship
DONE 51) Set priority and choose the highest priority to work with
DONE 52) Expose Element fields to be configurable
DONE 53) Money data type
DONE 54) Extensive comments management infrastructure
DONE 55) Use optional in FieldUtils and RelationUtils
DONE 56) Create WorkElement class - the parent for workflow objects (ROOT) 
     as opposed to Element , the parent of non workflow objects (REF/NOMINAL)
DONE 57) visibleInForm, visibleInTable in relation
DONE 58) Retirement of REF. A retired REF can still work within existing workflow but cannot be chosen for future
DONE 59) Take out audit page
DONE 60) Upgrade to Hibernate Search 6.1.5 and Hibernate Core 6
DONE 61) Absent/Error indicator in dependencies - even when they are displayed as buttons and tabs
DONE 62) Support bidirectional relationship - bidirectional relationship is needed if search is going deep beyond root
DONE 63) Search for documents uploaded
DONE 64) Use LDAP
DONE 65) Fully responsive (support mobile)
DONE 66) Support multiple Start Event (can be used to support multiple workflow)
DONE 67) Ability to load references from script and filter what is shown to Root. This feature is used to implement multi-match



Admin feature
-------------
1) Audit trail (on all objects)
2) Specify workflow parameters


Roles
-----
1) USER: Typical user with more specific roles in workflows
2) REF_ADMIN: Admin of references. Can CRUD references. 
3) AUDITOR: Can get audit report
4) WORKFLOW_ADMIN: Can move workflow to a particular activity manually. Can delete work if need be. 
                   NOTE!: THIS SHOULD BE IMPLEMENTED IN THE WORKFLOW ITSELF
4) Keycloak admin: Admin that manages (CRUD)  of other admin. Done thru Keycloak
    

Conventions
-----------
1) DEPRECATED (after we move to Hibernate Search 6) Search field with 4sort is for sorting and 4range is for range search
2) Field with BOTH @Audited and @WebField will be displayed on audit trail page. @WebField visibleInTable must equal true
3) Attachments must be OneToOne(cascade = CascadeType.ALL)
4) A->B. If B is REF, A can 'Link to B' (only one-way support Many-To-One, Many-To-Many)
   A->B. If B is NOMINAL, A can 'Create B' (supports one-way One-to-One, One-To-Many)
    I.E. You cannot link to an existing entity
5) There can be only 1 ROOT per application. There can only be 1 WORKFLOW per application
6) Status / worklist will only be tracked in root entities
7) Tabs can only be built from WebRelations. Numbering of indexes must exclude 0
8) DEPRECATED (after we move to Hibernate Search 6) User cannot be named as -EMPTY- (reserved for indexing null for owners)
9) An approver cannot manually release a work
10) We must call the line below in our renderer

        relationMementos.get(<relation name>).setBtnAddLinkNew(<button to be disabled in case of maximum capacity>);

    If we want to disable a component (button) upon maximum capacity 
    
11) In webrelation, min must be smaller or equal to max
12) Only URL friendly characters must be used in real name, username and role name - if not, UserRetrieval will be problematic
13) ValueBinder mapping to String must start with String<TargetType>ValueBinder
14) % in search query indicate a fuzzy search
15) The visibleInField expression has access to class, the visibleInForm expression has access to object. This is because, when a field in a table is visible, it is visible for ALL object (or viceversa). OTOH, for a form, visibility can be controlled by the data available  
16) Custom component can only be used on ROOT 
17) If an Object is to be editted mid workflow, permission must be explicitly given to ALL its field (FieldRights)
18) If in a WebRelation, customComponentInTable is set, then the relationship has to be Fetch.EAGER
19) Rights will control enabled/disabled, visibility (visibbleInTable, visibleInForm) controls visibility
20) Visibility:
    a. Can be set in WebField (visibbleInTable, visibleInForm), that can be overridden in WebEntity (fieldVisibility)
    b. Of relationship is always true in Form, in a Table, visibility of a relationship can be control by setting a CustomComponentInTableRenderer (note convention #18)
21) By default, an object that has just been created (DRAFT) is editable (all fields) unless explicitly disallowed
22) By default, an object that is in progress  is not editable (all fields) unless explicitly allowed
23) ROOT and REF must inherit from WorkElement as they are flowing thru a workflow (ROOT: that is just obvious, REF: this is when REF is created and go thru a maker-checker to be approved as available in the app)
24) order should start at .... 


Generating classes from xsd
---------------------------
1) Go to project root <where the src folder is located>
2) Run
> xjc -d src/main/java/ -p com.azrul.langkuik.framework.workflow.model src/main/resources/workflow.xsd


Optional usage
--------------
PATTERN #1
if (a!=null){
    Y(a);
}
----------
Optional<...> ao;

ao.ifPresent(a->{
    Y(a);
});


PATTERN #2
var b;
if (a!=null){
    b= Y(a);
}else{
    b= Z();
}  

-----------
Optional<...> ao; 

var b = ao.map(a->{
    return Y(a);
}).orElseGet(()->{
    return Z();
});






Notes
-----
1) DEPRECATED: Putting @NumericField on a numeric field forces it to be numeric despite having a bridge translating the field to String
2) Dealing with file upload
    1) Use LangkuikMultiFileBuffer - this will allow us to upload many files
        constraint it to 1 - this will constraint us to upload 1 file at a time. We need to do this because our error message coming from the Upload component does not say which file is erroneous. So, it is better to upload one at a time and therefore the error message, if appears, definitely is associated to the latest uploaded file
    2) We need to constraint the upload in 2 places:

        in application.properties (need to be big)(*1)

            spring.servlet.multipart.max-file-size=2MB
            spring.servlet.multipart.max-request-size=2MB

        in Vaadin Upload component 

            upload.setMaxFileSize(2_000_000); <--Vaadin upload error handling will only capture violation beyond this limit and thus (*1) 

3) DEPRECATED: Idea: to try out EntityGraph to load the first object when the main table is clicked. 
        -> This cannot work because EntityGraph does not allow in-db pagination for subentities

4) We are using Hibernate Validator for validating fields. Unfortunately, the moment we have  Validator's annotation,
   Hibernate will insist on validating every persistent we do. This is bad because we also persist 'pre=draft' object 
   to allow, say, file upload for example. These pre-draft objects are not necessarily valid (thus the name, pre-draft)
   So, we need to disable Hibernate validation: 

        properties.setProperty("javax.persistence.validation.mode","none");

5) Seeing that the lookup table is "looked up" in real time, we may want to cache it. 
   For now we are only caching the lookup entity (DistrictStateCountry)

6) Idea: Put all object to extend LangkuikExt. Put a field transxId in there. Whenever we create children, we propagate the parent's transxId.
    When we move from DRAFT to any other status, just query for the same transxId and move them together.

    This is not feasible because querying LangkuikExt does return the objects we want. Plus, the query is a bunch of
    UNIONs and will negate index. So probably not. Need to find another way to switch status 
    => When an object is first created (when the Create New button is clicked in TableView) the object is created with PREDRAFT status.
    When object is saved as draft, PREDRAFT -> DRAFT. If something happened (say, the user just let the Create New dialog on
    until session expires), the object will still be in PREDRAFT status. PREDRAFT objects will not be shown in search. 
    Need to see how to clean up left over PREDRAFTS that is not converted to DRAFT.


8) Getting User custom attribute from Keycloak. Make sure the attribute is created under User and a Mapper is created under Client
https://stackoverflow.com/questions/53224680/retrieve-custom-attribute-from-javascript-using-javascript-adapter-keycloak

9) Alternative to #6 above - see convention #5 and #6

10) To help "solve" the issue in #6, we enacted a few things:
    a. Introduce WebEntityType=REF. REF is an advanced lookup. REF would need to be managed separately (special role)
        and can only be linked to a root
    b. From root, you can only CREATE non-root (called WebEntityType=NOMINAL) entities. You cannot link to it
    c. We should only support M-N, M-1 and 1-1 uni-directional relationship. 1-M should only be modeled as M-N

    This way, root and the aggregate is really isolated and boundaries are proper

11) Ownership management
        1) When first created, owner = creator. Status = DRAFT
        2) When submitted, owner = NULL, Status = IN PROGRESS and work is submitted to a particular worklist
        3) Any user of that worklist can see the item
        4) User can open and 'book' the work (booking : owner = current user). Other users can no longer see the work. Until lease expires (lease can be specified in workflow)
        5) User can then 'submit' the work until the next worklist. Again, owner becomes NULL upon submission
        6) Repeat #3

12) Allowing access to users under a role in keycloak:
    a) Select realm role : user
    b) Click Composite Role
    c) Under client role, choose realm-management
    d) Select view-clients, view-realms, view-users

13) I can put approval on a loop, e.g. approval->if not, correct it-> go back to approval. 
    Because of this, when we 
        a. display
        b. make decision
    We must take into acct only the latest decision. To solve this, we must purge decisions after they moved on
    Assumption:
        1) There can be 1 active approval state at one time

14) 
        

java.lang.String id
java.lang.Long createdTimestamp
java.lang.String username
java.lang.Boolean enabled
java.lang.Boolean totp
java.lang.Boolean emailVerified
java.lang.String firstName
java.lang.String lastName
java.lang.String email
java.util.ArrayList disableableCredentialTypes
java.util.ArrayList requiredActions
java.lang.Integer notBefore
java.lang.String id
java.lang.Long createdTimestamp
java.lang.String username
java.lang.Boolean enabled
java.lang.Boolean totp
java.lang.Boolean emailVerified
java.lang.String firstName
java.lang.String lastName
java.lang.String email
java.util.LinkedHashMap attributes
      key:attributes type:java.util.LinkedHashMap value:{Manager=[minnie.mouse]}
java.util.ArrayList disableableCredentialTypes
java.util.ArrayList requiredActions
java.lang.Integer notBefore


//reset sql
﻿delete from work_owners where work_id='31';
delete from approval;
update application set worklist=null;
update application set worklist=2 where id='31';

Elasticsearch stuck because of low disk
---------------------------------------
curl --user elastic:1qazZAQ! -XPUT 'http://localhost:9200/_cluster/settings' -H 'Content-Type: application/json' -d '{
"transient" : {
"cluster.routing.allocation.disk.threshold_enabled" : false
}}'

curl --user elastic:1qazZAQ! -XPUT 'http://localhost:9200/_all/_settings' -H 'Content-Type: application/json' -d '{
"index.blocks.read_only_allow_delete": null
}'

curl --user elastic:1qazZAQ! -XPUT http://localhost:9200/_cluster/settings -H "Content-Type: application/json" -d\
'{
  "persistent": {
    "cluster.routing.allocation.disk.watermark.low": "95%",
    "cluster.routing.allocation.disk.watermark.high": "98%",
    "cluster.routing.allocation.disk.watermark.flood_stage": "99%",
    "cluster.info.update.interval": "1m"
  }
}'


Elasticsearch purge index
--------------------------
curl --user elastic:1qazZAQ! -XDELETE http://localhost:9200/*

curl --user elastic:1qazZAQ! -XDELETE http://localhost:9200/project-000001

curl --user elastic:1qazZAQ! -XDELETE http://localhost:9200/productlisting-000001
curl --user elastic:1qazZAQ! -XDELETE http://localhost:9200/address-000001
curl --user elastic:1qazZAQ! -XDELETE http://localhost:9200/relationshipmanager-000001
curl --user elastic:1qazZAQ! -XDELETE http://localhost:9200/application-000001
curl --user elastic:1qazZAQ! -XDELETE http://localhost:9200/collateral-000001
curl --user elastic:1qazZAQ! -XDELETE http://localhost:9200/districtstatecountry-000001
curl --user elastic:1qazZAQ! -XDELETE http://localhost:9200/attachment-000001
curl --user elastic:1qazZAQ! -XDELETE http://localhost:9200/applicant-000001
curl --user elastic:1qazZAQ! -XDELETE http://localhost:9200/approval-000001
curl --user elastic:1qazZAQ! -XDELETE http://localhost:9200/comment-000001

curl --user elastic:1qazZAQ! -XDELETE http://localhost:9200/applicant-write
curl --user elastic:1qazZAQ! -XDELETE http://localhost:9200/approval-write
curl --user elastic:1qazZAQ! -XDELETE http://localhost:9200/application-write 
curl --user elastic:1qazZAQ! -XDELETE http://localhost:9200/relationshipmanager-write
curl --user elastic:1qazZAQ! -XDELETE http://localhost:9200/attachment-write
curl --user elastic:1qazZAQ! -XDELETE http://localhost:9200/productlisting-write
curl --user elastic:1qazZAQ! -XDELETE http://localhost:9200/comment-write
curl --user elastic:1qazZAQ! -XDELETE http://localhost:9200/address-write
curl --user elastic:1qazZAQ! -XDELETE http://localhost:9200/collateral-write  

curl --user lgadmin:1qazZAQ! -X POST "http://localhost:9200/_security/user/projectworkflow?pretty" -H 'Content-Type: application/json' -d'
{
  "password" : "1qazZAQ!",
  "roles" : [ "user" ],
  "full_name" : "Project Workflow",
  "email" : "projectworkflow@company.com",
  "metadata" : {
    "intelligence" : 7
  }
}
'


Elasticsearch set username
--------------------------
elasticsearch-setup-passwords interactive -u "http://localhost:9200"

users useradd lgadmin -p 1qazZAQ! -r superuser

Elasticsearch get all indeces
-----------------------------
curl --user elastic:1qazZAQ! -XGET  "http://localhost:9200/_cat/indices"

Purge
-----
TRUNCATE TABLE address CASCADE;
TRUNCATE TABLE address_aud CASCADE;
TRUNCATE TABLE applicant CASCADE;
TRUNCATE TABLE applicant_aud CASCADE;
TRUNCATE TABLE application CASCADE;
TRUNCATE TABLE application_aud CASCADE;
TRUNCATE TABLE applications_applicants CASCADE;
TRUNCATE TABLE approval CASCADE;
TRUNCATE TABLE approval_aud CASCADE;
TRUNCATE TABLE attachment_aud CASCADE;
TRUNCATE TABLE attachment CASCADE;
TRUNCATE TABLE attachments CASCADE;
TRUNCATE TABLE collateral CASCADE;
TRUNCATE TABLE comment CASCADE;
TRUNCATE TABLE comment_aud CASCADE;
TRUNCATE TABLE comments CASCADE;
TRUNCATE TABLE revinfo CASCADE;
TRUNCATE TABLE element_approval_aud CASCADE;
TRUNCATE TABLE element_owners CASCADE;
TRUNCATE TABLE element_owners_aud CASCADE;


DROP TABLE collateral CASCADE;
DROP TABLE applicant CASCADE;
DROP TABLE address CASCADE;
DROP TABLE applications_applicants CASCADE;
DROP TABLE collateral CASCADE;
DROP TABLE element_approval_aud CASCADE;
DROP TABLE element_owners_aud CASCADE;
DROP TABLE element_owners CASCADE;
DROP TABLE relationshipmanager_aud CASCADE;
DROP TABLE comment_aud CASCADE;
DROP TABLE address_aud CASCADE;
DROP TABLE applicant_aud CASCADE;
DROP TABLE application CASCADE;
DROP TABLE application_aud CASCADE;
DROP TABLE approval CASCADE;
DROP TABLE approval_aud CASCADE;
DROP TABLE attachment_aud CASCADE;
DROP TABLE attachment CASCADE;
DROP TABLE attachments CASCADE;
DROP TABLE revinfo CASCADE;
DROP TABLE comment CASCADE;
DROP TABLE comments CASCADE;
DROP TABLE userprofile CASCADE;
DROP TABLE districtstatecountry CASCADE;
DROP TABLE productlisting CASCADE;
DROP TABLE relationshipmanager CASCADE;



Generate POJO from XSD
-----------------------
 xjc -d src -p com.azrul.langkuik.framework.workflow.model workflow.xsd

Search elasticsearch by keyword in a doc
----------------------------------------
{
	"query": {
		"query_string": {
		    "default_field":"_attachments.document",
			"query": "*gubergren*"
		}
	},
	"size": 10,
	"from": 0,
	"sort": []
}

//search with enumPath
{
  "query": {
    "bool": {
      "must": [
            {
		    "query_string": {
			"query": "*random*"
		    }
	    },
	    {
                    "wildcard": {
                      "enumPath": "10951>10953*"
                    }
            }
      ]
    }
  }
}

Keycloak export
---------------
#practical_kalam = keycloak's container id
> docker exec -it practical_kalam /opt/keycloak/bin/kc.sh export --file /tmp/my_realm.json --users same_file


#Copy from container's /tmp/my_realm.json to host' /tmp
>  docker cp practical_kalam:/tmp/my_realm.json /tmp

Import certs
------------
#import
> sudo keytool -import -file keycloak.crt.pem -keystore "$(/usr/libexec/java_home)/lib/security/cacerts" -alias "keycloak certificate" -storepass changeit

#check
> sudo keytool -list -keystore "$(/usr/libexec/java_home)/lib/security/cacerts" -storepass changeit|grep keycloak